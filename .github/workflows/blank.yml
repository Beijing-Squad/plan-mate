# JaCoCo Code Coverage for Changed Files in Kotlin Project
name: Kotlin PR Coverage

# Controls when the workflow will run
on:
  # Trigger on pull requests to any branch
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  
  # Keep the workflow_dispatch option for manual runs
  workflow_dispatch:

jobs:
  pr-coverage:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for detecting file changes
      
      # Set up Java for the project
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          cache: gradle
      
      # Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Find changed files in the PR
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v43
        with:
          files: |
            **/*.kt
            **/*.java
      
      # Create a list of changed packages/files for JaCoCo
      - name: Create includes list for JaCoCo
        id: create-includes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Processing changed files..."
          
          INCLUDES=""
          
          # Process each changed file
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Skip test files
            if [[ $file == *"Test.kt" || $file == *"Test.java" || $file =~ /test/ ]]; then
              echo "Skipping test file: $file"
              continue
            fi
            
            # Get the package name from the file content
            if [[ $file == *.kt ]]; then
              PACKAGE=$(grep -E "^package" "$file" | sed -E 's/package\s+([^;]+).*/\1/')
            elif [[ $file == *.java ]]; then
              PACKAGE=$(grep -E "^package" "$file" | sed -E 's/package\s+([^;]+).*/\1/')
            else
              continue
            fi
            
            # Get the class name from the file name
            CLASS=$(basename "$file" | sed 's/\.[^.]*$//')
            
            if [ ! -z "$PACKAGE" ]; then
              # Add the fully qualified class name to includes
              if [ ! -z "$INCLUDES" ]; then
                INCLUDES="$INCLUDES,"
              fi
              INCLUDES="${INCLUDES}${PACKAGE}.${CLASS}"
              echo "Added: ${PACKAGE}.${CLASS}"
            fi
          done
          
          if [ -z "$INCLUDES" ]; then
            echo "No valid source files changed in this PR."
            echo "includes=*" >> $GITHUB_OUTPUT
          else
            echo "includes=$INCLUDES" >> $GITHUB_OUTPUT
            echo "Changed classes to check: $INCLUDES"
          fi
      
      # Create a custom Gradle task to run JaCoCo only on changed files
      - name: Create custom Gradle task for changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cat > jacoco-pr.gradle << EOF
          apply plugin: 'jacoco'
          
          task jacocoPRReport(type: JacocoReport) {
              dependsOn test
              
              reports {
                  xml.required = true
                  csv.required = true
                  html.required = true
              }
              
              def includesList = '${{ steps.create-includes.outputs.includes }}'.split(',')
              
              afterEvaluate {
                  classDirectories.setFrom(files(classDirectories.files.collect {
                      fileTree(dir: it, includes: includesList.collect { className ->
                          className.replace('.', '/') + '.class'
                      })
                  }))
              }
              
              sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
              executionData.setFrom(files("${buildDir}/jacoco/test.exec"))
          }
          EOF
          
          # Add the custom task to the project
          echo "apply from: 'jacoco-pr.gradle'" >> build.gradle
      
      # Run the custom JaCoCo task for changed files
      - name: Run JaCoCo on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: ./gradlew jacocoPRReport
      
      # Generate coverage badges for changed files
      - name: Generate JaCoCo Badge
        id: jacoco
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: build/reports/jacoco/jacocoPRReport/jacocoPRReport.csv
      
      # Log coverage to the console
      - name: Log coverage percentage
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Line coverage: ${{ steps.jacoco.outputs.coverage }}"
          echo "Branch coverage: ${{ steps.jacoco.outputs.branches }}"
      
      # Check if coverage meets the required threshold
      - name: Verify minimum coverage
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          COVERAGE="${{ steps.jacoco.outputs.coverage }}"
          THRESHOLD=80
          
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "::error::Code coverage for changed files is below the minimum required threshold of $THRESHOLD%. Current coverage: $COVERAGE%"
            exit 1
          else
            echo "Coverage for changed files is $COVERAGE%, which meets the minimum required threshold of $THRESHOLD%"
          fi
      
      # Add detailed coverage comment to PR
      - name: Comment PR with coverage
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-coverage
          message: |
            ## PR Coverage Report 📊
            
            **Analysis of changes in this PR only:**
            
            **Line Coverage:** ${{ steps.jacoco.outputs.coverage }}%
            **Branch Coverage:** ${{ steps.jacoco.outputs.branches }}%
            
            <details>
            <summary>Modified Files</summary>
            
            ```
            ${{ steps.changed-files.outputs.all_changed_files }}
            ```
            </details>
            
            ${{ steps.jacoco.outputs.coverage < 80 && '⚠️ **Coverage is below the required 80% threshold**' || '✅ **Coverage meets the required 80% threshold**' }}
      
      # Fallback message if no relevant files were changed
      - name: No relevant files changed
        if: steps.changed-files.outputs.any_changed != 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-coverage
          message: |
            ## PR Coverage Report 📊
            
            No source code files were changed in this PR, or only test files were modified.
            Coverage analysis was skipped.
